// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Ipc {
  public static class Master
  {
    static readonly string __ServiceName = "ipc.Master";

    static readonly Marshaller<global::Ipc.KeepAliveRequest> __Marshaller_KeepAliveRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Ipc.KeepAliveRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Ipc.KeepAliveResponse> __Marshaller_KeepAliveResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Ipc.KeepAliveResponse.Parser.ParseFrom);

    static readonly Method<global::Ipc.KeepAliveRequest, global::Ipc.KeepAliveResponse> __Method_KeepAlive = new Method<global::Ipc.KeepAliveRequest, global::Ipc.KeepAliveResponse>(
        MethodType.Unary,
        __ServiceName,
        "KeepAlive",
        __Marshaller_KeepAliveRequest,
        __Marshaller_KeepAliveResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ipc.IpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Master</summary>
    public abstract class MasterBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Ipc.KeepAliveResponse> KeepAlive(global::Ipc.KeepAliveRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Master</summary>
    public class MasterClient : ClientBase<MasterClient>
    {
      /// <summary>Creates a new client for Master</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MasterClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Master that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MasterClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MasterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MasterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Ipc.KeepAliveResponse KeepAlive(global::Ipc.KeepAliveRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return KeepAlive(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Ipc.KeepAliveResponse KeepAlive(global::Ipc.KeepAliveRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KeepAlive, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Ipc.KeepAliveResponse> KeepAliveAsync(global::Ipc.KeepAliveRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return KeepAliveAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Ipc.KeepAliveResponse> KeepAliveAsync(global::Ipc.KeepAliveRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KeepAlive, null, options, request);
      }
      protected override MasterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MasterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(MasterBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_KeepAlive, serviceImpl.KeepAlive).Build();
    }

  }
  public static class Slave
  {
    static readonly string __ServiceName = "ipc.Slave";


    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ipc.IpcReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Slave</summary>
    public abstract class SlaveBase
    {
    }

    /// <summary>Client for Slave</summary>
    public class SlaveClient : ClientBase<SlaveClient>
    {
      /// <summary>Creates a new client for Slave</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SlaveClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Slave that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SlaveClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SlaveClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SlaveClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      protected override SlaveClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SlaveClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(SlaveBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
    }

  }
}
#endregion
